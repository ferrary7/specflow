import jsPDF from 'jspdf'

export const exportPackageToPDFRobust = async (packageData) => {
  try {
    const pdf = new jsPDF()
    const pageWidth = pdf.internal.pageSize.getWidth()
    const pageHeight = pdf.internal.pageSize.getHeight()
    const margin = 20
    let yPosition = margin

    // Helper function to add new page if needed
    const checkPageBreak = (requiredHeight) => {
      if (yPosition + requiredHeight > pageHeight - margin) {
        pdf.addPage()
        yPosition = margin
      }
    }

    // Helper function to wrap text
    const addWrappedText = (text, x, y, maxWidth, fontSize = 12) => {
      pdf.setFontSize(fontSize)
      const splitText = pdf.splitTextToSize(text, maxWidth)
      pdf.text(splitText, x, y)
      return splitText.length * (fontSize * 0.5) // Approximate line height
    }

    // Title
    pdf.setFontSize(24)
    pdf.setFont(undefined, 'bold')
    pdf.text(packageData.name, margin, yPosition)
    yPosition += 15

    // Description
    if (packageData.description) {
      pdf.setFontSize(12)
      pdf.setFont(undefined, 'normal')
      const descHeight = addWrappedText(packageData.description, margin, yPosition, pageWidth - 2 * margin)
      yPosition += descHeight + 10
    }

    // Package info
    checkPageBreak(40)
    pdf.setFontSize(10)
    pdf.setTextColor(100, 100, 100)
    pdf.text(`Package ID: ${packageData.id}`, margin, yPosition)
    yPosition += 8
    pdf.text(`Created: ${new Date(packageData.created_at).toLocaleDateString()}`, margin, yPosition)
    yPosition += 8
    pdf.text(`Last Updated: ${new Date(packageData.updated_at).toLocaleDateString()}`, margin, yPosition)
    yPosition += 8
    pdf.text(`Items: ${packageData.items?.length || 0}`, margin, yPosition)
    yPosition += 20

    // Items section
    if (packageData.items?.length > 0) {
      checkPageBreak(30)
      pdf.setFontSize(18)
      pdf.setFont(undefined, 'bold')
      pdf.setTextColor(0, 0, 0)
      pdf.text('Items', margin, yPosition)
      yPosition += 15

      // Draw a line under "Items"
      pdf.setDrawColor(200, 200, 200)
      pdf.line(margin, yPosition, pageWidth - margin, yPosition)
      yPosition += 15

      // Process each item
      for (const [index, item] of packageData.items.entries()) {
        checkPageBreak(60)

        // Item number and name
        pdf.setFontSize(14)
        pdf.setFont(undefined, 'bold')
        pdf.setTextColor(0, 0, 0)
        pdf.text(`${index + 1}. ${item.name}`, margin, yPosition)
        yPosition += 12

        // Description
        if (item.description) {
          pdf.setFontSize(10)
          pdf.setFont(undefined, 'normal')
          pdf.setTextColor(80, 80, 80)
          const descHeight = addWrappedText(item.description, margin + 15, yPosition, pageWidth - 2 * margin - 15, 10)
          yPosition += descHeight + 5
        }

        // Vendor link
        if (item.vendor_link) {
          pdf.setFontSize(9)
          pdf.setTextColor(50, 100, 200)
          pdf.text(`Vendor: ${item.vendor_link}`, margin + 15, yPosition)
          yPosition += 8
        }

        // Add space between items
        yPosition += 10

        // Add a subtle separator line
        if (index < packageData.items.length - 1) {
          pdf.setDrawColor(240, 240, 240)
          pdf.line(margin + 15, yPosition, pageWidth - margin, yPosition)
          yPosition += 10
        }
      }
    } else {
      checkPageBreak(20)
      pdf.setFontSize(12)
      pdf.setFont(undefined, 'italic')
      pdf.setTextColor(150, 150, 150)
      pdf.text('No items in this package.', margin, yPosition)
      yPosition += 20
    }

    // Footer
    const totalPages = pdf.internal.getNumberOfPages()
    for (let i = 1; i <= totalPages; i++) {
      pdf.setPage(i)
      
      // Footer line
      pdf.setDrawColor(200, 200, 200)
      pdf.line(margin, pageHeight - 25, pageWidth - margin, pageHeight - 25)
      
      // Footer text
      pdf.setFontSize(8)
      pdf.setFont(undefined, 'normal')
      pdf.setTextColor(120, 120, 120)
      pdf.text('Generated by SpecFlow - Professional Package Management for Interior Designers', margin, pageHeight - 15)
      
      // Page number and date
      const dateStr = `Generated on ${new Date().toLocaleDateString()} - Page ${i} of ${totalPages}`
      const dateWidth = pdf.getTextWidth(dateStr)
      pdf.text(dateStr, pageWidth - margin - dateWidth, pageHeight - 15)
    }

    // Download the PDF
    const fileName = `${packageData.name.replace(/[^a-z0-9]/gi, '_').toLowerCase()}_package.pdf`
    pdf.save(fileName)

    return true
  } catch (error) {
    console.error('Error generating robust PDF:', error)
    throw error
  }
}