import jsPDF from 'jspdf'
import html2canvas from 'html2canvas'

export const exportPackageToPDF = async (packageData) => {
  try {
    // Create a temporary div to render the package content
    const tempDiv = document.createElement('div')
    tempDiv.style.position = 'absolute'
    tempDiv.style.left = '-9999px'
    tempDiv.style.top = '-9999px'
    tempDiv.style.width = '794px' // A4 width in pixels (72 DPI)
    tempDiv.style.backgroundColor = '#ffffff'
    tempDiv.style.padding = '40px'
    tempDiv.style.fontFamily = 'system-ui, -apple-system, sans-serif'
    tempDiv.style.color = '#000000'

    tempDiv.innerHTML = `
      <div style="margin-bottom: 30px;">
        <h1 style="font-size: 32px; margin-bottom: 8px; color: #000000; font-weight: bold;">${packageData.name}</h1>
        ${packageData.description ? `<p style="font-size: 16px; color: #4a5568; margin-bottom: 20px;">${packageData.description}</p>` : ''}
        <div style="font-size: 14px; color: #6b7280;">
          <p style="margin: 4px 0;">Package ID: ${packageData.id}</p>
          <p style="margin: 4px 0;">Created: ${new Date(packageData.created_at).toLocaleDateString()}</p>
          <p style="margin: 4px 0;">Last Updated: ${new Date(packageData.updated_at).toLocaleDateString()}</p>
          <p style="margin: 4px 0;">Items: ${packageData.items?.length || 0}</p>
        </div>
      </div>
      
      ${packageData.items?.length > 0 ? `
        <div>
          <h2 style="font-size: 24px; margin-bottom: 20px; color: #000000; border-bottom: 2px solid #d1d5db; padding-bottom: 8px; font-weight: bold;">Items</h2>
          <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px;">
            ${packageData.items.map(item => `
              <div style="border: 1px solid #d1d5db; border-radius: 8px; padding: 16px; background: #f9fafb;">
                ${item.image_url ? `
                  <img src="${item.image_url}" alt="${item.name}" style="width: 100%; height: 200px; object-fit: cover; border-radius: 6px; margin-bottom: 12px;" crossorigin="anonymous" />
                ` : ''}
                <h3 style="font-size: 18px; margin-bottom: 8px; color: #000000; font-weight: 600;">${item.name}</h3>
                ${item.description ? `<p style="font-size: 14px; color: #4a5568; margin-bottom: 8px; line-height: 1.4;">${item.description}</p>` : ''}
                ${item.vendor_link ? `<p style="font-size: 12px; color: #2563eb; word-break: break-all;"><strong>Vendor:</strong> ${item.vendor_link}</p>` : ''}
              </div>
            `).join('')}
          </div>
        </div>
      ` : '<p style="text-align: center; color: #6b7280; font-style: italic;">No items in this package.</p>'}
      
      <div style="margin-top: 40px; padding-top: 20px; border-top: 1px solid #d1d5db; text-align: center; font-size: 12px; color: #6b7280;">
        <p style="margin: 4px 0;">Generated by SpecFlow - Professional Package Management for Interior Designers</p>
        <p style="margin: 4px 0;">Generated on ${new Date().toLocaleDateString()} at ${new Date().toLocaleTimeString()}</p>
      </div>
    `

    document.body.appendChild(tempDiv)

    // Wait for images to load
    await new Promise(resolve => setTimeout(resolve, 2000))

    const canvas = await html2canvas(tempDiv, {
      scale: 2,
      useCORS: true,
      allowTaint: true,
      backgroundColor: '#ffffff',
      width: 794,
      windowWidth: 794
    })

    document.body.removeChild(tempDiv)

    // Create PDF
    const pdf = new jsPDF('p', 'mm', 'a4')
    const imgData = canvas.toDataURL('image/png')
    
    const imgWidth = 210 // A4 width in mm
    const pageHeight = 297 // A4 height in mm
    const imgHeight = (canvas.height * imgWidth) / canvas.width
    let heightLeft = imgHeight

    let position = 0

    pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight)
    heightLeft -= pageHeight

    while (heightLeft >= 0) {
      position = heightLeft - imgHeight
      pdf.addPage()
      pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight)
      heightLeft -= pageHeight
    }

    // Download the PDF
    const fileName = `${packageData.name.replace(/[^a-z0-9]/gi, '_').toLowerCase()}_package.pdf`
    pdf.save(fileName)

    return true
  } catch (error) {
    console.error('Error generating PDF:', error)
    throw error
  }
}

// Simpler PDF export without images (fallback)
export const exportPackageToPDFSimple = (packageData) => {
  try {
    const pdf = new jsPDF()
    
    // Title
    pdf.setFontSize(24)
    pdf.text(packageData.name, 20, 30)
    
    // Description
    if (packageData.description) {
      pdf.setFontSize(12)
      const splitDescription = pdf.splitTextToSize(packageData.description, 170)
      pdf.text(splitDescription, 20, 50)
    }
    
    // Package info
    pdf.setFontSize(10)
    pdf.text(`Package ID: ${packageData.id}`, 20, 80)
    pdf.text(`Created: ${new Date(packageData.created_at).toLocaleDateString()}`, 20, 90)
    pdf.text(`Last Updated: ${new Date(packageData.updated_at).toLocaleDateString()}`, 20, 100)
    pdf.text(`Items: ${packageData.items?.length || 0}`, 20, 110)
    
    let yPosition = 130
    
    if (packageData.items?.length > 0) {
      pdf.setFontSize(16)
      pdf.text('Items', 20, yPosition)
      yPosition += 15
      
      packageData.items.forEach((item, index) => {
        if (yPosition > 250) {
          pdf.addPage()
          yPosition = 30
        }
        
        pdf.setFontSize(12)
        pdf.text(`${index + 1}. ${item.name}`, 20, yPosition)
        yPosition += 8
        
        if (item.description) {
          pdf.setFontSize(10)
          const splitDesc = pdf.splitTextToSize(item.description, 160)
          pdf.text(splitDesc, 30, yPosition)
          yPosition += splitDesc.length * 5 + 3
        }
        
        if (item.vendor_link) {
          pdf.setFontSize(9)
          pdf.text(`Vendor: ${item.vendor_link}`, 30, yPosition)
          yPosition += 8
        }
        
        yPosition += 5
      })
    }
    
    // Footer
    pdf.setFontSize(8)
    const pageCount = pdf.internal.getNumberOfPages()
    for (let i = 1; i <= pageCount; i++) {
      pdf.setPage(i)
      pdf.text(`Generated by SpecFlow - Page ${i} of ${pageCount}`, 20, 285)
      pdf.text(`Generated on ${new Date().toLocaleDateString()}`, 120, 285)
    }
    
    const fileName = `${packageData.name.replace(/[^a-z0-9]/gi, '_').toLowerCase()}_package.pdf`
    pdf.save(fileName)
    
    return true
  } catch (error) {
    console.error('Error generating simple PDF:', error)
    throw error
  }
}